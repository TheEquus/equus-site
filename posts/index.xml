<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Equus üê¥ (Annie)</title><link>https://anniequus.com/posts/</link><description>Recent content in Posts on Equus üê¥ (Annie)</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Mon, 25 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://anniequus.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>The password manager to cure lockdown woes</title><link>https://anniequus.com/posts/arduino-password-manager/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://anniequus.com/posts/arduino-password-manager/</guid><description>If you see this (without inspecting source), video tags don't seem to work on your browser mate. Introduction I&amp;rsquo;ll be introducing a roughly two week project that I worked on with two other group mates for a uni subject. The theme we were given was to build something that makes our home smarter or more fun. As a team, we started off with the idea of a password manager and decided to add some small fun elements, that would make this password manager the most fun password manager out there (hopefully).</description></item><item><title>Path to a crypto master, the engineer way</title><link>https://anniequus.com/posts/sub1-ductf2021/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://anniequus.com/posts/sub1-ductf2021/</guid><description>Who knew I&amp;rsquo;d be writing a crypto writeup.
The Beginning The challenge provides a SageMath bit of code, as well as a cipher text.
def encrypt(msg, f): return &amp;#39;&amp;#39;.join(chr(f.substitute(c)) for c in msg) P.&amp;lt;x&amp;gt; = PolynomialRing(ZZ) f = 13*x^2 + 3*x + 7 FLAG = open(&amp;#39;./flag.txt&amp;#39;, &amp;#39;rb&amp;#39;).read().strip() enc = encrypt(FLAG, f) print(enc) That&amp;rsquo;s some messy looking cipher text&amp;hellip;
Understanding the sage Thankfully the SageMath here is nice and short. All that we need to know, is that each character of the flag is thrown into the encryption function f.</description></item><item><title>"Oh yeah Motorola exists" - Revelations made in CSAW CTF 2021</title><link>https://anniequus.com/posts/csaw2021-serial/</link><pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate><guid>https://anniequus.com/posts/csaw2021-serial/</guid><description>A mildly interesting challenge that touches (very briefly) on serial communication. But given that the files are .sal files, we can use the trusty old Saleae&amp;rsquo;s logic analyser to help decode everything.
TL;DR: Use Saleae to extract information, be reminded that Motorola exists and created S-records, break the information down, use Ghidra to disassemble and decompile the machine code, and make sense of everything to eventually obtain the flag.</description></item><item><title>Inefficiently solving GoogleCTF 2021 with Verilog (ModelSim)</title><link>https://anniequus.com/posts/googlectf-parking/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://anniequus.com/posts/googlectf-parking/</guid><description>I unfortunately did not solve this during the competition period, but mildly obsessed over this for about a week after the competition. Here&amp;rsquo;s how I lost way too many hours of sleep.
TL;DR - Realise this was all just one big digital logic circuit, recognise the different logic gates and connections, build it all in Verilog, solve with some ModelSim bruteforcing, and get enough sleep.
Introduction The challenge provides us with a zip file containing a python script that takes in some data (level1 / level2) to build the challenge.</description></item><item><title>How HackTheBoxCTF Exposed The Marriage of Saleae And Hardware</title><link>https://anniequus.com/posts/htb-hardware-writeups/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>https://anniequus.com/posts/htb-hardware-writeups/</guid><description>This will be a writeup of all the hardware challenges in HackTheBoxCTF 2021. Although half the challenges in the category was just figuring out the protocol used, there were some interesting lessons learned.
The Basics The first three challenges (which I&amp;rsquo;ll just call the basics) were best for getting used to using Saleae, its analysers, and getting a basic understanding of the protocols. This is where the heavy reliance on Saleae (logic analyser alpha) begins.</description></item><item><title>The Writhing South Bass Cover</title><link>https://anniequus.com/posts/tws-bass/</link><pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate><guid>https://anniequus.com/posts/tws-bass/</guid><description>A fun song for a fun band. Sex Baby&amp;rsquo;s cover of &amp;ldquo;The Writhing South&amp;rdquo; by Say Anything is out for the public to feast on! A band consisting of a rotation between some mates and I, it was my turn to rock out on the bass for this one.
The final mix (on bandcamp) The Writhing South by Sex Baby The full line up can be seen on the bandcamp page of the track itself.</description></item></channel></rss>